(dp1
S'output'
p2
S"<class 'sqlite3.IntegrityError'> FOREIGN KEY constraint failed"
p3
sS'layer'
p4
S'/home/nikita/web2py/applications/TheChef/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash="Welcome to TheChef"\n    """recepies = db(db.recepies).select(orderby=~db.recepies.pub_date)\n    return dict(recepies=recepies)   """\n    if len(request.args): page=int(request.args[0])\n    else: page=0\n    items_per_page=1\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.recepies).select(orderby=~db.recepies.pub_date,limitby=limitby)\n    return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef create():\n    response.flash="Submit Your Own Recepie"\n    form=SQLFORM(db.recepies)\n    if form.process().accepted:\n        response.flash="Thank You for submitting your recepie"\n    elif form.errors:\n        response.flash=\'Please check your submission\'\n    else:\n        response.flash=\'Submit Your Own recepie\'\n    return dict(form=form)\n\ndef edit():\n    recepies=db.recepies(request.args(0)) or redirect(URL(\'error\'))\n    form=SQLFORM(db.recepies,recepies, deletable=True)\n    if form.validate():\n        if form.deleted:\n            db(db.recepies.id==recepies.id).delete()\n            redirect(URL(\'index\'))\n        else:\n            recepies.update_record(**dict(form.vars))\n            response.flash=\'Changes Accepted\'\n    else:\n        response.flash=\'Something went wrong\'\n    return dict(form=form)\n\n\ndef download():\n    return response.download(request, db)\n\ndef show():\n    recepies=db.recepies(request.args(0)) or redirect(URL(\'error\'))\n    return dict(recepies=recepies)\n\n\ndef mypage():\n    if len(request.args): page=int(request.args[0])\n    else: page=0\n    items_per_page=1\n    limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    rows=db(db.recepies.user_id==auth.user_id).select(orderby=~db.recepies.pub_date,limitby=limitby)\n    return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\ndef add_like():\n    db.likes.insert(username=auth.user.id,recepie_name=1)\n\nresponse._vars=response._caller(add_like)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/nikita/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/nikita/web2py/applications/TheChef/controllers/default.py", line 114, in <module>\n  File "/home/nikita/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/nikita/web2py/applications/TheChef/controllers/default.py", line 112, in add_like\n    db.likes.insert(username=auth.user.id,recepie_name=1)\n  File "/home/nikita/web2py/gluon/packages/dal/pydal/objects.py", line 731, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/nikita/web2py/gluon/packages/dal/pydal/adapters/base.py", line 746, in insert\n    raise e\nIntegrityError: FOREIGN KEY constraint failed\n'
p11
s.